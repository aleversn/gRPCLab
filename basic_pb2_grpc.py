# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import basic_pb2 as basic__pb2


class TestStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetUserInfo = channel.unary_unary(
                '/Test/SetUserInfo',
                request_serializer=basic__pb2.UserInfo.SerializeToString,
                response_deserializer=basic__pb2.Status.FromString,
                )
        self.GetUserInfo = channel.unary_unary(
                '/Test/GetUserInfo',
                request_serializer=basic__pb2.UserInfo.SerializeToString,
                response_deserializer=basic__pb2.UserInfo.FromString,
                )


class TestServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetUserInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetUserInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUserInfo,
                    request_deserializer=basic__pb2.UserInfo.FromString,
                    response_serializer=basic__pb2.Status.SerializeToString,
            ),
            'GetUserInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserInfo,
                    request_deserializer=basic__pb2.UserInfo.FromString,
                    response_serializer=basic__pb2.UserInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Test', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Test(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetUserInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Test/SetUserInfo',
            basic__pb2.UserInfo.SerializeToString,
            basic__pb2.Status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Test/GetUserInfo',
            basic__pb2.UserInfo.SerializeToString,
            basic__pb2.UserInfo.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class FileStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetImage = channel.stream_unary(
                '/File/SetImage',
                request_serializer=basic__pb2.Image.SerializeToString,
                response_deserializer=basic__pb2.Status.FromString,
                )
        self.GetImage = channel.unary_stream(
                '/File/GetImage',
                request_serializer=basic__pb2.UserInfo.SerializeToString,
                response_deserializer=basic__pb2.Image.FromString,
                )


class FileServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetImage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetImage': grpc.stream_unary_rpc_method_handler(
                    servicer.SetImage,
                    request_deserializer=basic__pb2.Image.FromString,
                    response_serializer=basic__pb2.Status.SerializeToString,
            ),
            'GetImage': grpc.unary_stream_rpc_method_handler(
                    servicer.GetImage,
                    request_deserializer=basic__pb2.UserInfo.FromString,
                    response_serializer=basic__pb2.Image.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'File', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class File(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetImage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/File/SetImage',
            basic__pb2.Image.SerializeToString,
            basic__pb2.Status.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/File/GetImage',
            basic__pb2.UserInfo.SerializeToString,
            basic__pb2.Image.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
